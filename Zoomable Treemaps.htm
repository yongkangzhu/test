<!DOCTYPE html>
<!-- saved from url=(0035)https://bost.ocks.org/mike/treemap/ -->
<html class="ocks-org do-not-copy"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Zoomable Treemaps</title>
<style>

@import url(../style.css?aea6f0a);

#chart {
  width: 960px;
  height: 500px;
  background: #ddd;
}

text {
  pointer-events: none;
}

.grandparent text {
  font-weight: bold;
}

rect {
  fill: none;
  stroke: #fff;
}

rect.parent,
.grandparent rect {
  stroke-width: 2px;
}

.grandparent rect {
  fill: orange;
}

.grandparent:hover rect {
  fill: #ee9700;
}

.children rect.parent,
.grandparent rect {
  cursor: pointer;
}

.children rect.parent {
  fill: #bbb;
  fill-opacity: .5;
}

.children:hover rect.child {
  fill: #bbb;
}

</style>

</head><body><header>
  <aside>June 8, 2012</aside>
  <a href="https://bost.ocks.org/mike/" rel="author">Mike Bostock</a>
</header>

<h1>Zoomable Treemaps</h1>

<p id="chart">

<svg width="960" height="500" style="margin-left: 0px;"><g transform="translate(0,20)" style="shape-rendering: crispedges;"><g class="depth"><g><rect class="child" x="921.3843229443164" y="455.7954708840918" width="38.61567705568359" height="24.2045291159082"></rect><rect class="parent" x="921.3843229443164" y="455.7954708840918" width="38.61567705568359" height="24.2045291159082"><title>335</title></rect><text dy=".75em" x="927.3843229443164" y="461.7954708840918" style="fill-opacity: 1;">IEvaluable</text></g><g><rect class="child" x="877.235653355279" y="455.7954708840918" width="44.14866958903713" height="24.2045291159082"></rect><rect class="parent" x="877.235653355279" y="455.7954708840918" width="44.14866958903713" height="24.2045291159082"><title>383</title></rect><text dy=".75em" x="883.235653355279" y="461.7954708840918" style="fill-opacity: 1;">IPredicate</text></g><g><rect class="child" x="877.235653355279" y="426.33201900762356" width="82.76434664472072" height="29.46345187646824"></rect><rect class="parent" x="877.235653355279" y="426.33201900762356" width="82.76434664472072" height="29.46345187646824"><title>874</title></rect><text dy=".75em" x="883.235653355279" y="432.33201900762356" style="fill-opacity: 1;">IValueProxy</text></g><g><rect class="child" x="799.981998132882" y="426.33201900762356" width="77.25365522239724" height="53.66798099237644"></rect><rect class="parent" x="799.981998132882" y="426.33201900762356" width="77.25365522239724" height="53.66798099237644"><title>1,486</title></rect><text dy=".75em" x="805.981998132882" y="432.33201900762356" style="fill-opacity: 1;">Orientation</text></g><g><rect class="child" x="799.981998132882" y="385.81077539934444" width="160.01800186711796" height="40.521243608279235"></rect><rect class="parent" x="799.981998132882" y="385.81077539934444" width="160.01800186711796" height="40.521243608279235"><title>2,324</title></rect><text dy=".75em" x="805.981998132882" y="391.81077539934444" style="fill-opacity: 1;">Filter</text></g><g><rect class="child" x="635.3133434902846" y="385.81077539934444" width="164.6686546425974" height="94.18922460065556"></rect><rect class="parent" x="635.3133434902846" y="385.81077539934444" width="164.6686546425974" height="94.18922460065556"><title>5,559</title></rect><text dy=".75em" x="641.3133434902846" y="391.81077539934444" style="fill-opacity: 1;">Property</text></g><g><rect class="child" x="801.6415942625555" y="270.2848256200164" width="158.3584057374445" height="115.52594977932802"></rect><rect class="parent" x="801.6415942625555" y="270.2848256200164" width="158.3584057374445" height="115.52594977932802"><title>6,557</title></rect><text dy=".75em" x="807.6415942625555" y="276.2848256200164" style="fill-opacity: 1;">Stats</text></g><g><rect class="child" x="635.3133434902846" y="270.2848256200164" width="166.32825077227085" height="115.52594977932802"></rect><rect class="parent" x="635.3133434902846" y="270.2848256200164" width="166.32825077227085" height="115.52594977932802"><title>6,887</title></rect><text dy=".75em" x="641.3133434902846" y="276.2848256200164" style="fill-opacity: 1;">Sort</text></g><g><rect class="child" x="416.1282311773338" y="375.40336340635355" width="219.1851123129507" height="104.59663659364645"></rect><rect class="parent" x="416.1282311773338" y="375.40336340635355" width="219.1851123129507" height="104.59663659364645"><title>8,217</title></rect><text dy=".75em" x="422.1282311773338" y="381.40336340635355" style="fill-opacity: 1;">Dates</text></g><g><rect class="child" x="416.1282311773338" y="270.2848256200164" width="219.1851123129507" height="105.11853778633713"></rect><rect class="parent" x="416.1282311773338" y="270.2848256200164" width="219.1851123129507" height="105.11853778633713"><title>8,258</title></rect><text dy=".75em" x="422.1282311773338" y="276.2848256200164" style="fill-opacity: 1;">Arrays</text></g><g class="children"><rect class="child" x="697.270607772955" y="240.39074351999054" width="262.72939222704474" height="29.89408210002577"></rect><rect class="child" x="832.6782228757314" y="171.03434913445997" width="127.32177712426835" height="69.35639438553056"></rect><rect class="child" x="697.270607772955" y="171.03434913445997" width="135.4076151027764" height="69.35639438553056"></rect><rect class="parent" x="697.270607772955" y="171.03434913445997" width="262.72939222704474" height="99.25047648555645"><title>9,346</title></rect><text dy=".75em" x="703.270607772955" y="177.03434913445997" style="fill-opacity: 1;">math</text></g><g><rect class="child" x="416.1282311773338" y="171.03434913445997" width="281.14237659562133" height="99.25047648555645"></rect><rect class="parent" x="416.1282311773338" y="171.03434913445997" width="281.14237659562133" height="99.25047648555645"><title>10,001</title></rect><text dy=".75em" x="422.1282311773338" y="177.03434913445997" style="fill-opacity: 1;">Colors</text></g><g class="children"><rect class="child" x="221.25296308838475" y="462.34686526796975" width="194.87526808894913" height="17.65313473203014"></rect><rect class="child" x="221.25296308838475" y="328.42357063422276" width="194.87526808894913" height="133.923294633747"></rect><rect class="parent" x="221.25296308838475" y="328.42357063422276" width="194.87526808894913" height="151.57642936577724"><title>10,587</title></rect><text dy=".75em" x="227.25296308838475" y="334.42357063422276" style="fill-opacity: 1;">heap</text></g><g><rect class="child" x="221.25296308838475" y="171.03434913445997" width="194.87526808894913" height="157.3892214997629"></rect><rect class="parent" x="221.25296308838475" y="171.03434913445997" width="194.87526808894913" height="157.3892214997629"><title>10,993</title></rect><text dy=".75em" x="227.25296308838475" y="177.03434913445997" style="fill-opacity: 1;">Geometry</text></g><g class="children"><rect class="child" x="172.51306496405692" y="409.6469790547793" width="48.73989812432782" height="70.35302094522058"></rect><rect class="child" x="90.85688088107" y="409.6469790547793" width="81.65618408298695" height="70.35302094522046"></rect><rect class="child" x="0" y="409.6469790547793" width="90.85688088107" height="70.35302094522058"></rect><rect class="child" x="0" y="329.35701949962277" width="221.25296308838475" height="80.28995955515654"></rect><rect class="parent" x="0" y="329.35701949962277" width="221.25296308838475" height="150.64298050037712"><title>11,946</title></rect><text dy=".75em" x="6" y="335.35701949962277" style="fill-opacity: 1;">palette</text></g><g><rect class="child" x="0" y="171.03434913445997" width="221.25296308838475" height="158.32267036516285"></rect><rect class="parent" x="0" y="171.03434913445997" width="221.25296308838475" height="158.32267036516285"><title>12,555</title></rect><text dy=".75em" x="6" y="177.03434913445997" style="fill-opacity: 1;">Displays</text></g><g><rect class="child" x="671.1794592941258" y="0" width="288.82054070587424" height="171.03434913445997"></rect><rect class="parent" x="671.1794592941258" y="0" width="288.82054070587424" height="171.03434913445997"><title>17,705</title></rect><text dy=".75em" x="677.1794592941258" y="6" style="fill-opacity: 1;">Maths</text></g><g><rect class="child" x="359.30873931587627" y="0" width="311.8707199782495" height="171.03434913445997"></rect><rect class="parent" x="359.30873931587627" y="0" width="311.8707199782495" height="171.03434913445997"><title>19,118</title></rect><text dy=".75em" x="365.30873931587627" y="6" style="fill-opacity: 1;">Shapes</text></g><g><rect class="child" x="0" y="0" width="359.30873931587627" height="171.03434913445997"></rect><rect class="parent" x="0" y="0" width="359.30873931587627" height="171.03434913445997"><title>22,026</title></rect><text dy=".75em" x="6" y="6" style="fill-opacity: 1;">Strings</text></g></g><g class="grandparent"><rect y="-20" width="960" height="20"></rect><text x="6" y="-14" dy=".75em">flare.util</text></g></g></svg></p><aside>Click any cell to zoom in, or the top orange label to zoom out.</aside>

<p>Treemaps are a form of <a href="http://mbostock.github.com/d3/ex/treemap.html">space</a><a href="http://mbostock.github.com/d3/ex/pack.html">-filling</a> <a href="http://mbostock.github.com/d3/ex/sunburst.html">layout</a> where the area of each rectangle is proportional to its value. This example shows the size of files in a source tree.

</p><p>Treemaps visualize hierarchical data, but since often only the leaf nodes (files rather than folders) are drawn, it can be difficult to see the hierarchy. <a href="http://en.wikipedia.org/wiki/File:Tree_Map.png">Padding</a> is sometimes used to show the hierarchy via containment, though this introduces area distortion. <a href="http://www.win.tue.nl/~vanwijk/ctm.pdf">Cushion gradients</a> also indicate hierarchy, but are somewhat unintuitive (or perhaps just ugly).

</p><p>The treemap above uses interaction to reveal the hierarchy incrementally: clicking on a node zooms in. Only two levels of the hierarchy are visible at a time. This allows the layout’s aspect ratio (ideally φ) to be optimized for the current view, rather than computing a global layout. It also allows the exploration of arbitrarily-large datasets: data can be lazily-loaded and positioned on zoom!

</p><p>This visualization is implemented in <a href="http://d3js.org/">D3.js</a>, based on an <a href="http://mbostock.github.com/d3/talk/20111018/treemap.html">earlier version</a> from my talk at SVG Open. Also see Nicolas Garcia Belmonte’s zoomable treemap of <a href="http://thejit.org/static/v20/Jit/Examples/Treemap/example1.html">music albums</a>, and The New York Times’ free-form zooming for <a href="http://www.nytimes.com/packages/html/newsgraphics/2011/0119-budget/">Obama’s 2012 budget proposal</a>. Note the subtle differences in behavior!

</p><footer>
  <aside>June 8, 2012</aside>
  <a href="https://bost.ocks.org/mike/" rel="author">Mike Bostock</a>
</footer>

<script src="./Zoomable Treemaps_files/d3.v3.min.js" charset="utf-8"></script>
<script>

var margin = {top: 20, right: 0, bottom: 0, left: 0},
    width = 960,
    height = 500 - margin.top - margin.bottom,
    formatNumber = d3.format(",d"),
    transitioning;

var x = d3.scale.linear()
    .domain([0, width])
    .range([0, width]);

var y = d3.scale.linear()
    .domain([0, height])
    .range([0, height]);

var treemap = d3.layout.treemap()
    .children(function(d, depth) { return depth ? null : d._children; })
    .sort(function(a, b) { return a.value - b.value; })
    .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
    .round(false);

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.bottom + margin.top)
    .style("margin-left", -margin.left + "px")
    .style("margin.right", -margin.right + "px")
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    .style("shape-rendering", "crispEdges");

var grandparent = svg.append("g")
    .attr("class", "grandparent");

grandparent.append("rect")
    .attr("y", -margin.top)
    .attr("width", width)
    .attr("height", margin.top);

grandparent.append("text")
    .attr("x", 6)
    .attr("y", 6 - margin.top)
    .attr("dy", ".75em");

d3.json("flare.json", function(root) {
  initialize(root);
  accumulate(root);
  layout(root);
  display(root);

  function initialize(root) {
    root.x = root.y = 0;
    root.dx = width;
    root.dy = height;
    root.depth = 0;
  }

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // We also take a snapshot of the original children (_children) to avoid
  // the children being overwritten when when layout is computed.
  function accumulate(d) {
    return (d._children = d.children)
        ? d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
        : d.value;
  }

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
    if (d._children) {
      treemap.nodes({_children: d._children});
      d._children.forEach(function(c) {
        c.x = d.x + c.x * d.dx;
        c.y = d.y + c.y * d.dy;
        c.dx *= d.dx;
        c.dy *= d.dy;
        c.parent = d;
        layout(c);
      });
    }
  }

  function display(d) {
    grandparent
        .datum(d.parent)
        .on("click", transition)
      .select("text")
        .text(name(d));

    var g1 = svg.insert("g", ".grandparent")
        .datum(d)
        .attr("class", "depth");

    var g = g1.selectAll("g")
        .data(d._children)
      .enter().append("g");

    g.filter(function(d) { return d._children; })
        .classed("children", true)
        .on("click", transition);

    g.selectAll(".child")
        .data(function(d) { return d._children || [d]; })
      .enter().append("rect")
        .attr("class", "child")
        .call(rect);

    g.append("rect")
        .attr("class", "parent")
        .call(rect)
      .append("title")
        .text(function(d) { return formatNumber(d.value); });

    g.append("text")
        .attr("dy", ".75em")
        .text(function(d) { return d.name; })
        .call(text);

    function transition(d) {
      if (transitioning || !d) return;
      transitioning = true;

      var g2 = display(d),
          t1 = g1.transition().duration(750),
          t2 = g2.transition().duration(750);

      // Update the domain only after entering new elements.
      x.domain([d.x, d.x + d.dx]);
      y.domain([d.y, d.y + d.dy]);

      // Enable anti-aliasing during the transition.
      svg.style("shape-rendering", null);

      // Draw child nodes on top of parent nodes.
      svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

      // Fade-in entering text.
      g2.selectAll("text").style("fill-opacity", 0);

      // Transition to the new view.
      t1.selectAll("text").call(text).style("fill-opacity", 0);
      t2.selectAll("text").call(text).style("fill-opacity", 1);
      t1.selectAll("rect").call(rect);
      t2.selectAll("rect").call(rect);

      // Remove the old node when the transition is finished.
      t1.remove().each("end", function() {
        svg.style("shape-rendering", "crispEdges");
        transitioning = false;
      });
    }

    return g;
  }

  function text(text) {
    text.attr("x", function(d) { return x(d.x) + 6; })
        .attr("y", function(d) { return y(d.y) + 6; });
  }

  function rect(rect) {
    rect.attr("x", function(d) { return x(d.x); })
        .attr("y", function(d) { return y(d.y); })
        .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
        .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
  }

  function name(d) {
    return d.parent
        ? name(d.parent) + "." + d.name
        : d.name;
  }
});

</script>
<script>

GoogleAnalyticsObject = "ga", ga = function() { ga.q.push(arguments); }, ga.q = [], ga.l = +new Date;
ga("create", "UA-48272912-3", "ocks.org");
ga("send", "pageview");

</script>
<script async="" src="./Zoomable Treemaps_files/analytics.js"></script>
</body></html>